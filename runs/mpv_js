#!/bin/bash

set -e  # Exit immediately if a command exits with a non-zero status

echo "Installing dependencies and multimedia libraries..."

# Update and install basic tools
sudo apt update
sudo apt install -y \
  git gcc g++ make yasm meson ninja-build \
  python3 python3-pip python3-setuptools \
  libx11-dev libxext-dev libxinerama-dev libxrandr-dev \
  libasound2-dev libpulse-dev libwayland-dev \
  libfreetype-dev libfribidi-dev libfontconfig1-dev \
  libjpeg-dev libssl-dev lua5.4 liblua5.4-dev \
  libbluray-dev libcdio-dev libcdio-paranoia-dev \
  libdvdnav-dev libdvdread-dev libegl1-mesa-dev \
  libjack-jackd2-dev liblcms2-dev \
  libpipewire-0.3-dev librubberband-dev \
  libsdl2-dev libsixel-dev libuchardet-dev \
  libva-dev libva-drm2 libva-wayland2 libva-x11-2 \
  libvdpau-dev libvulkan-dev libxkbcommon-dev \
  libxpresent-dev libxss-dev libxv-dev libzimg-dev \
  zlib1g-dev xdg-utils mesa-utils \
  libarchive-dev libass-dev libavcodec-dev libavdevice-dev \
  libavfilter-dev libavformat-dev libavutil-dev libswresample-dev \
  libswscale-dev libcaca-dev yt-dlp \
  || echo "Some packages could not be installed."

# Install vapoursynth runtime and Python bindings
echo "Installing vapoursynth Python bindings..."
pip3 install --user --upgrade vapoursynth || echo "Failed to install vapoursynth via pip."

# Check for `libplacebo` availability or build from source
if ! pkg-config --exists libplacebo; then
  echo "Building libplacebo from source..."
  git clone https://github.com/haasn/libplacebo.git
  cd libplacebo
  meson setup build
  ninja -C build
  sudo ninja -C build install
  cd ..
  rm -rf libplacebo
fi

# Clone mpv-build
echo "Cloning mpv-build repository..."
git clone https://github.com/mpv-player/mpv-build.git
cd mpv-build

# Configure ffmpeg
echo "Configuring ffmpeg with additional options..."
printf "%s\n" \
  --enable-libx264 \
  --enable-libmp3lame \
  --enable-libfdk-aac \
  --enable-libvpx \
  --enable-libopus \
  --enable-libtheora \
  --enable-libbluray \
  --enable-libzimg \
  --enable-libass \
  --enable-nonfree \
  --enable-lcms \
  --enable-libdovi \
  --enable-shaderc \
  --enable-vulkan \
  --enable-xxhash \
  >> ffmpeg_options

# Configure mpv
echo "Configuring mpv with libmpv and Lua support..."
printf "%s\n" \
  -Dlibmpv=true \
  -Dlua=enabled \
  -Djavascript=enabled \
  -Dopengl-cb=enabled \
  -Dvulkan=enabled \
  -Ddovi=enabled \
  -Dbuildtype=release \
  -Doptimization=3 \
  -Duchardet=enabled \
  -Dv4l2=enabled \
  -Dbluray=enabled \
  -Dhardwaredec=auto \
  -Dvaapi=enabled \
  -Dvdpau=enabled \
  -Dnvdec=enabled \
  -Dcuda-hwaccel=enabled \
  -Dgl-proc-addr=enabled \
  -Dglslang=enabled \
  -Dlcms=enabled \
  -Dlibdovi=enabled \
  -Dshaderc=enabled \
  -Dxxhash=enabled \
  >> mpv_options

# Ensure master versions are used
echo "Ensuring master versions are used for mpv, ffmpeg, and libass..."
./use-mpv-master
./use-ffmpeg-master

# Build mpv
echo "Building mpv, ffmpeg, and libass with verbose output..."
./rebuild -j$(nproc)

# Install mpv
echo "Installing mpv..."
sudo ./install

# Set up mpv binary
echo "Copying mpv binary to /usr/local/bin..."
sudo cp ./build/mpv /usr/local/bin/
sudo chmod +x /usr/local/bin/mpv

# Set up desktop integration
echo "Setting up mpv.desktop..."
DESKTOP_FILE_PATH="/usr/share/applications/mpv.desktop"
sudo cp ./build/mpv.desktop $DESKTOP_FILE_PATH
sudo sed -i "s|Exec=.*|Exec=/usr/local/bin/mpv %U|" $DESKTOP_FILE_PATH
sudo update-desktop-database /usr/share/applications

# Verify runtime dependencies
echo "Verifying runtime dependencies..."
ldd /usr/local/bin/mpv | grep "not found" || echo "All runtime dependencies are satisfied."

echo "mpv installation completed successfully!"
